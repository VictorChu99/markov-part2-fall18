This is the analysis for Markov Part 2, Fall 2018

Include your name and net id here. Answer the questions from the assignment 
that are reproduced below

(1) Determine (from running Benchmark.java) how long it takes for 
BaseMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 

Starting tests

time	source	#chars
0.268	507914	2000
0.525	507914	4000
1.024	507914	8000
2.447	507914	16000
4.698	507914	32000

0.619	507914	4096
1.168	1015828	4096
1.987	1523742	4096
2.707	2031656	4096
3.503	2539570	4096
4.087	3047484	4096
4.716	3555398	4096
5.403	4063312	4096
5.948	4571226	4096
6.417	5079140	4096

Finished tests

Source code is 496,768, but I 507,914. Piazza post addressed this issue. 
TA said it was okay as well


The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(NT) analysis for BaseMarkov?

Yes. When we multiplied the source by 10, the time roughly increased by a factor 
of 10 as well. These claims support O(N) complexity. Since we are increasing the characters
by a factor of 10, the program has to go through each of those characters. For example,
if you doubled the characters, you would increase time by roughly a factor of 2. As you 
increase the amount of characters, this code gets longer. 
 



(2) Determine (from running Benchmark.java) how long it takes for 
EfficientMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 
random characters using the default file and an order 5 Markov Model. 
Include these timings in your report. 

Starting tests

time	source	#chars
0.124	507914	2000
0.103	507914	4000
0.117	507914	8000
0.095	507914	16000
0.118	507914	32000

0.075	507914	4096
0.182	1015828	4096
0.305	1523742	4096
0.416	2031656	4096
0.462	2539570	4096
0.579	3047484	4096
0.722	3555398	4096
1.454	4063312	4096
1.648	4571226	4096
1.809	5079140	4096

Finished tests


The program also generates 4,096 characters using texts that increase in 
size from 496,768 characters to 4,967,680 characters (10 times the number).  
Do you the timings support the O(N+T) analysis for EfficientMarkov?

Yes. As seen above, T has less of an effect on the total runtime, 
because we are adding it. When T is small, it has somewhat of an impact,
because 10 might be a large number, relative to N. However,
when N gets huge,T doesn't matter as much. As seen with the runtime between BaseMarkov
and EfficientMarkov, initially, T has somewhat of an impact increasing runtime just slightly
for EfficientMarkov. However, as N gets larger, this T doesn't matter
as much, and EfficientMarkov is much quicker than BaseMarkov which has a runtime of O(NT). 
This is due to the fact that O(NT) is much larger, because when your N gets large, 
you multiply that by a factor of 10 making it even larger. 




(3)The tests in the class Benchmark use an order-5 Markov Model. 
Run tests that you think are appropriate to determine if the order of the 
Markov Model has a significant impact on the running time for BaseMarkov. 
Explain your reasoning.

The orders I used were order-1 and order-50 as shown below. Order has a 
significant impact on the overall runtime in this program. 

ORDER-50

Starting tests

time	source	#chars
0.199	507914	2000
0.176	507914	4000
0.151	507914	8000
0.103	507914	16000
0.146	507914	32000

0.099	507914	4096
0.218	1015828	4096
0.339	1523742	4096
0.726	2031656	4096
1.565	2539570	4096
1.792	3047484	4096
2.204	3555398	4096
2.541	4063312	4096
3.678	4571226	4096
3.464	5079140	4096

Finished tests

ORDER-1
Starting tests

time	source	#chars
0.050	507914	2000
0.042	507914	4000
0.033	507914	8000
0.033	507914	16000
0.069	507914	32000

0.027	507914	4096
0.050	1015828	4096
0.177	1523742	4096
0.384	2031656	4096
0.381	2539570	4096
0.442	3047484	4096
0.566	3555398	4096
0.675	4063312	4096
0.736	4571226	4096
0.794	5079140	4096

Finished tests































